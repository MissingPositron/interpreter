void main() {
	int fib = 20
	
	print "fibonacci:\n"
	
	print "fibdp(" + fib + ") = "
	print fibdp(fib) + "\n"

	print "fib(" + fib + ") = "
	print fib(fib) + "\n"
	
	print "\nexponentiation by squaring:\n"
	
	float base = 3
	float exp = 2
	
	print "exp(" + base + ", " + exp + ") = "
	print exp(base, exp) + "\n"

	print "\n"

	//other tests for break, continue and typoe casting
	int k
	for(k = 0; k < 20; k++) {
		if(k == 5) break
		print k + "\n"
	}
	
	print "\n"

	print (int) 3.54 + "\n"
	print (float) 3 / 2 + "\n"
}

//recursive fibonacci, because now we can!
int fib(int n) {
	if(n < 0) return 0
	
	if(n == 0 || n == 1)
		return n
		
	return fib(n - 1) + fib(n - 2)
}

//fibonacci with no recursion
int fibdp(int n) {
	if(n <= 0) return 0
	
	int fib[3]
	fib[0] = 1 fib[1] = 1
	
	int i
	for(i = 2; i < n; i++) {
		fib[i % 3] = fib[(i - 1) % 3] + fib[(i - 2) % 3]
	}
	return fib[(i - 1) % 3]
}

//exponentiation by squaring
float exp(float base, float exp) {
	float y = 1
	if(exp < 0) {
		base = 1 / base
		exp = -exp
	}
	
	if(exp != 0) {
		while(exp > 1) {
			if(exp % 2 == 0) {
				base *= base
				exp /= 2
			} else {
				y *= base
				base *= base
				exp = (exp - 1) / 2
			}
		}
		return base * y
	} else
		return 1
}